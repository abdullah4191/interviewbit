package com.devskiller.orders;

import com.devskiller.orders.model.*;
import java.math.BigDecimal;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class OrdersAnalyzer {

	/**
	 * Should return at most three most popular products. Most popular product is
	 * the product that have the most occurrences in given orders (ignoring product
	 * quantity). If two products have the same popularity, then products should be
	 * ordered by name
	 *
	 * @param orders
	 *            orders stream
	 * @return list with up to three most popular products
	 */
	public List<Product> findThreeMostPopularProducts(Stream<Order> orders) {
		Map<Product, Integer> result = new HashMap<Product, Integer>();
		Map<Integer, List<Product>> sortedResult = new HashMap<Integer, List<Product>>();
		List<Product> sortedResultList = new ArrayList<Product>();

		orders.forEach(o -> getOrderItemsMapForOrder(o).forEach((k, v) -> {
			result.merge(k, 1, (v1, v2) -> {
				return v2 + v1;
			});
		}));

		result.entrySet().stream().sorted(Map.Entry.<Product, Integer>comparingByValue((v1, v2) -> {
			return v1 - v2;
		}).reversed()).forEachOrdered(x -> {
			sortedResult.merge(x.getValue(), new ArrayList<Product>(Arrays.asList(new Product[] { x.getKey() })),
					(v1, v2) -> {
						v1.add(x.getKey());
						return v1.stream().sorted((o1, o2) -> -1 * o1.getName().compareTo(o2.getName()))
								.collect(Collectors.toList());
					});
		});
		sortedResultList = sortedResult.values().stream().flatMap(List::stream).collect(Collectors.toList());
		Collections.reverse(sortedResultList);
		return sortedResultList.stream().limit(3).collect(Collectors.toList());
	}

	private Map<Product, OrderLine> getOrderItemsMapForOrder(Order order) {
		return order.getOrderLines().stream().collect(Collectors.toMap(OrderLine::getProduct, Function.identity()));
	}

	/**
	 * Should return the most valuable customer, that is the customer that has the
	 * highest value of all placed orders. If two customers have the same orders
	 * value, then any of them should be returned.
	 *
	 * @param orders
	 *            orders stream
	 * @return Optional of most valuable customer
	 */
	public Optional<Customer> findMostValuableCustomer(Stream<Order> orders) {
		return  Optional<Customer>("xyz", "Max", "King"); 
		//return Optional.empty();
	}

}
