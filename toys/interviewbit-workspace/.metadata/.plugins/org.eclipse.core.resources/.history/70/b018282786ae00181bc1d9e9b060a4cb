package codeScratch;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Stream;;

public class MinimumCharToPalindrom {

	public static int get(String input) {
		Stack<Character> pal = new Stack<Character>();

		for (Character c : input.toCharArray()) {
			Character peak = pal.isEmpty() ? null : pal.pop();
			System.out.println("Peak: " + peak);
			if (!c.equals(peak)) {
				pal.push(c);
			} else {
				if (peak != null)
					pal.push(peak);
				pal.push(c);
			}
			//
		}

		return pal.size();
	}

	public static int get2(String input) {
		List<Character> pal = new LinkedList<Character>();
		for (Character c : input.toCharArray()) {
			pal.add(c);
		}

		int count = input.length();
		System.out.println("initial count " + count);
		while (count > 0) {
			if (pal.get(0).equals(pal.get(pal.size() - 1))) {
				System.out.println("first element " + pal.get(0));
				System.out.println("last element " + pal.get(pal.size() - 1));
				pal.remove(0);
				count--;

			}
			System.out.println("only last element " + pal.get(pal.size() - 1));
			pal.remove(pal.size() - 1);
			count--;
			System.out.println("count: " + count);
		}

		return count;
	}

	public static int get3(String input) {
		int count = 0;
		while (!PalindromeString.istPalindrom(input)) {
			input = input.substring(0, input.length() - 1);
			count++;
		}
		return count;
	}

	public static void main(String[] args) {
		// ABC =>CBABC
		// AACECAAAA

		String input = "AACECAAAA";
		System.out.println(get3(input));
	}

}
